# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: quiz

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

plugins:
  - serverless-webpack
  - serverless-offline
  - serverless-dynamodb-local

custom:
  webpackIncludeModules: true
  serverless-offline:
    port: 4000
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      development:
        sources:
          - table: ${self:provider.stage}-quiz_applicants
            sources: [./migrations/applicants.json]

provider:
  name: aws
  runtime: nodejs6.10

# you can overwrite defaults here
  stage: dev
  region: ap-southeast-1

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
      Resource: arn:aws:dynamodb:ap-southeast-1:*:table/${self:provider.stage}-quiz_applicants
    - Effect: Allow
      Action:
        - s3:getObject
      Resource: arn:aws:s3:::*/*
    - Effect: Allow
      Action:
        - ses:SendEmail
      Resource: arn:aws:ses:eu-west-1:*:*

# you can define service wide environment variables here
  environment:
    CORRECT_METHOD: PUT
    USER_NAME: test_user
    PASSPHRASE: thisispassphrasefortesting
    SERVER_IP: 192.168.0.1
    S3_BUCKET: my-bucket
    S3_PRIVATE_KEY: key-name
    SES_FROM_EMAIL: example@email.dummy
    STAGE: ${self:provider.stage}
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
#  exclude:
#    - exclude-me.js
#    - exclude-me-dir/**

functions:
  get:
    handler: src/actions/handler.quiz
    events:
      - http:
          path: /
          method: get
          cors: true
          authorizer: false
  post:
    handler: src/actions/handler.quiz
    events:
      - http:
          path: /
          method: post
          cors: true
          authorizer: false
  put:
    handler: src/actions/handler.quiz
    events:
      - http:
          path: /
          method: put
          cors: true
          authorizer: false
  delete:
    handler: src/actions/handler.quiz
    events:
      - http:
          path: /
          method: delete
          cors: true
          authorizer: false

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
resources:
  Resources:
    ApplicantsDynamoDbTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: email
            AttributeType: S
        KeySchema:
          -
            AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.stage}-quiz_applicants
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
